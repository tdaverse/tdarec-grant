---
title: "Modular, interoperable, and extensible topological data analysis in R"
subtitle: "March Progress Report"
author:
  - name: Jason Cory Brunson
    affiliations:
      - ref: uf
    corresponding: true
  - name: Aymeric Stamm
    affiliations: 
      - ref: lmjl
affiliations:
  - id: lmjl
    name: UMR CNRS 6629, Nantes University, Ecole Centrale de Nantes
    department: Department of Mathematics Jean Leray
    city: Nantes
    country: France
  - id: uf
    name: University of Florida
    department: Laboratory for Systems Medicine, Division of Pulmonary, Critical Care, and Sleep Medicine
    city: Gainesville
    country: United States
date: 2025 March 31
format:
    pdf: default
    html:
      self-contained: true
toc: true
number-sections: true
bibliography: ../references.bib
---

## Overview {-}

To recap, the aims of the project are as follows:

**Aim 1:**
Publish a [{recipes}](https://recipes.tidymodels.org) extension for ML vectorizations based on persistent homology.

**Aim 2:**
Publish a [{flipr}](https://lmjl-alea.github.io/flipr/) extension for permutation-based statistical inference on topological data, compatible with Tidymodels workflows.

**Aim 3:**
Refactor [{ripserr}](https://github.com/tdaverse/ripserr/) with a current implementation of Ripser and connect additional options to R.

Currently, two packages are ready for CRAN release: {phutil}, a helper package that will grow as utilities shared across the TDAverse are established; and {tdarec}, a Tidymodels extension for machine learning with persistent homology and its vectorizations.
We plan to submit them in April and have blog posts ready to accompany their publication.

While not part of this award, the [{plt}](https://corybrunson.github.io/plt/) package, which provides a rich collection of tools for using persistence landscapes [@bubenik2017persistence], will also be submitted to CRAN in the coming month.
It will then be upgraded soon after to take advantage of the `persistence` class provided by {phutil}, and to address the first round of user feedback.

A {ripserr} upgrade has been submitted to CRAN, though it is not the upgrade supported by this award.
Several contributions in recent years went unpublished, so we are submitting them with a minor version ahead of the major version that will contain the updated source code and overhaul of the R/C++ interface.

We aim to submit {inphr} at the end of April and the (next) {ripserr} upgrade at the end of May.

## Specific Aim 1

Key personnel

: * Jason Cory Brunson (JBR), Assistant Professor of Medicine, University of Florida (UF)

Collaborators

: * Umar Islambekov (UIS), Assistant Professor of Data Science, Bowling Green State University (BGSU)
* Aleksei Luchinsky (ALU), Graduate Research Assistant in Data Science, BGSU

Repositories

: * [{TDAvec}](https://github.com/uislambekov/TDAvec/)
* [{tdarec}](https://github.com/corybrunson/tdarec)

### {TDAvec}

UIS and ALU submitted a minor release (0.1.41) that resolves [this issue](https://github.com/uislambekov/TDAvec/issues/6) with the persistence landscape vectorization.
{tdarec} was written to accommodate the previous behavior (0.1.4) with a warning rather than an error, but this will prevent even that inconvenience.

### {tdarec}

The remaining goals identified for this month have been completed:

* Automatically generate unit tests for step functions
* Simplify and finalize the Bayesian optimization vignette
* Complete code generation script for hyperparameter tuners

Additionally, the README example has been better documented.

Two planned features remain to be implemented:

* Design a standalone hyperparameter tuner for the scale sequence (discretization grid)
* Deploy PH computations to multiple engines

The first will be included in a later release.
The current release already relieves the user of the burden of specifying a discretization grid, which will be automatically generated during `prep()` if not explicitly provided.
The second will also be included in a later release---at the latest, once engine dispatch is implemented in {phutil} and it is made a dependency of {tdarec}.

## Specific Aim 2

Key personnel

: - Aymeric Stamm (AST), Research Engineer, CNRS

Collaborators

: - Matthieu Carrière (MCA), Research Scientist, DataShape team, Centre Inria d'Université Côte d'Azur
- Bertrand Michel (BMI), Full Professor of Statistics, Ecole Centrale de Nantes
- Alessia Pini (API), Associate Professor of Statistics, Università Cattolica del Sacro Cuore
- Simone Vantini (SVA), Full Professor of Statistics, Politecnico di Milano

Repositories

: * [{phutil}](https://tdaverse.github.io/phutil/)
* {inphr}
* [{flipr}](https://permaverse.github.io/flipr/)
* [{fdatest}](https://permaverse.github.io/fdatest/)

### {flipr} and {fdatest}

Minimal work was put into into it this month as MSI was no longer working on it abd AST dedicated his time to {phutil}.

### {inphr}

This is scheduled for April and we will be focusing on the two sample problem, i.e. comparing the distributions that generated two samples of persistence diagrams.

This will be done either in the space of persistence diagrams themselves or in functional spaces using functional representations of persistence diagrams as provided by {plt}. For this latter case, {fdatest} will be updated to use {flipr} permutation capabilities and a new release will be proposed.

### {phutil}

#### The 'persistence' class

We are about to release {phutil} `v0.0.1` featuring the 'persistence' class which, at the moment, is a list of 2 elements:

- `pairs`: A list of 2-column matrices containing birth-death pairs. The
$i$-*th* element of the list corresponds to the $(i-1)$-*th* homology
dimension. If there is no pairs for a given dimension but there are pairs in
higher dimensions, the corresponding element(s) is/are filled with a
$0 \times 2$ numeric matrix.

- `metadata`: A list of 3 elements containing information about how the data
was computed:

  - `data`: The name of the object containing the original data on which the
  persistence data was computed.
  - `engine`: The name of the package and the function of this package that computed the persistence data in the form `"package_name::package_function"`.
  - `filtration`: The filtration used in the computation in a human-readable format (i.e. full names, capitals where need, etc.).
  - `parameters`: A list of parameters used in the computation.
  - `call`: The exact call that generated the persistence data.

#### Unit testing

Currently, objects of class `list`, `data.frame`, `matrix`, `diagram` (as provided by `TDA::*Diag()` functions) and `PHom` (as provided by `ripserr::vietoris_rips()` function) can be cast into an object of class 'persistence'. The `format()` and `print()` `S3` specializations are implemented to nicely display key information about the persistence data and how it has been computed, using the [{cli}](https://cli.r-lib.org) and [{rlang}](https://rlang.r-lib.org) packages.

Although not strictly speaking test-driven development (TDD), we adopted the strategy of implementing unit tests right alongside any new implemented function. This allowed us to achieve 100% test coverage on the codebase which should facilitates future updates and releases. We used the [{tinytest}](https://github.com/markvanderloo/tinytest) package fwhich is a lightweight, no-dependency, full-featured package for unit testing. In contrast to [{testthat}](https://testthat.r-lib.org), it does not have dependencies, allowing us to keep our dependency trail at its minimum. We also use [{tinysnapshot}](https://github.com/vincentarelbundock/tinysnapshot) to handle unit testing of `format()` and `print()` methods.

#### Preparing next release

We filed a number of issues that we will shortly address in a next release.

[The 'extended_persistence' class](https://github.com/tdaverse/phutil/issues/4)

: This refers to a class for hosting extended persistence diagram which will be a named list of 4 elements: `Ordinary`, `Relative`, `Negative` and `Positive`. Each element will be an object of class 'persistence'. Metadata should be inherited in a factorized way to avoid duplication.

[Classes for hosting sets of persistence data](https://github.com/tdaverse/phutil/issues/5)

: We aim at performing statistical analyses of sets of (extended) persistence data. As such, we will also defined thew 'persistence_set' and 'extended_persistence_set' which are lists of '(extended_)persistence' objects. This is useful to later define `S3` specializations of methods such as `mean()`, `prcomp()` and so on.

[Persistence engines](https://github.com/tdaverse/phutil/issues/6)

: A set of functions which would take input data in a chosen mathematical form and a chosen data structure for storage, a chosen filtration and a chosen implementation to compute persistence data from and output the desired persistence data. These *engines* would contain all the required metadata to syntactically output valid expressions as well as actually compute the persistence data for compatible inputs. Arguably, these functions could be included in {tdarec} but are also useful to other **tdaverse** packages like [{ggtda}](https://tdaverse.github.io/ggtda/) so {phutil} will be a good place to factorize this code as well.

## Specific Aim 3

Key personnel

: * Jason Cory Brunson (JBR), Assistant Professor of Medicine, UF
* Alice Zhang (AZH), Undergraduate Research Assistant in CISE, UF
* Kent Phipps (KPH), Undergraduate Research Assistant in Computer and Information Science and Engineering (CISE), UF
* Sean Hershkowitz (SHE), Undergraduate Research Assistant in CISE, UF

Repositories

: * [KPH Ripser fork](https://github.com/strongKs/ripser/)
* [AZH Ripser fork](https://github.com/resetdisconnect/ripser/)
* [{ripserr}](https://github.com/tdaverse/ripserr/)

As described previously, KPH and SHE have produced an installable R package prototype adapted from the new Ripser source code and the old {ripserr} package (0.1.1), while AZH has produced an installable R package prototype build up from scratch around the new Ripser source code.
The three students spent half of March preparing to present their work at the UF Undergraduate Research Symposium but managed to implement the new input/output procedures necessary for exposing the library to R: passing an input distance matrix to C++, and returning a list of 2-column matrices of persistent pairs to R.

We will focus the month of April on harmonizing their different approaches and implementing them in a new fork of the {ripserr} repository.
Once the new implementation is validated against the examples and tests of the old, it will be merged in.
The month of May will be devoted to incorporating code to record and output representative cycles and cocycles.
Note: Because the previous Ripser source code omitted infinite bars from its output, the upgrade will introduce breaking changes as these bars are included.

Two important features will be omitted from the major {ripserr} upgrade but included in a later release:

* Ripser itself transforms input data into one of two formats that its core functions are designed to work with: flattened distance matrices, which we call "distance vectors", and sparse distance matrices. {ripserr} 0.1.1 and the forthcoming 0.3.0 only deal with distance vectors, so we are limiting our major upgrade to this format as well, but preliminary work toward accommodating sparse matrices is underway.
* In principle, representative cycles and cocycles could be recorded and returned in Cubical Ripser as well. However, this will require original work on our parts, since this feature was not implemented by the originators [@kaji2020cubical]. Our plan is to mimic its implementation in Ripser (`representative-cycles` and `representative-cocycles` branches) to take advantage of both C++ programs having used the same strategies to increase efficiency [@bauer2021ripser], but we cannot expect to complete this work during the funding period.

## References {-}
